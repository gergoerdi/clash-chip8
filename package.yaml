name: clash-chip8
version: 0.1.0
category: Hardware, Emulator

custom-setup:
  dependencies:
    - base
    - Cabal
    - clashilator

dependencies:
  - base
  - clash-prelude
  - ghc-typelits-natnormalise
  - ghc-typelits-extra
  - ghc-typelits-knownnat

  - retroclash-lib

  - clash-shake ^>= 0.1.1

  - lens
  - mtl
  - transformers
  - barbies ^>= 2.0.1
  - barbies-th

# Anything that Clash uses by default should go here
default-extensions:
  - BinaryLiterals
  - ConstraintKinds
  - DataKinds
  - DeriveAnyClass
  - DeriveGeneric
  - DeriveLift
  - DerivingStrategies
  - ExplicitForAll
  - ExplicitNamespaces
  - FlexibleContexts
  - FlexibleInstances
  - KindSignatures
  - MagicHash
  - MonoLocalBinds
  - NoImplicitPrelude
  - NoMonomorphismRestriction
  - NoStarIsType
  - NoStrictData
  - NoStrict
  - QuasiQuotes
  - ScopedTypeVariables
  - TemplateHaskellQuotes
  - TemplateHaskell
  - TypeApplications
  - TypeFamilies
  - TypeInType
  - TypeOperators

ghc-options:
  -fplugin GHC.TypeLits.KnownNat.Solver
  -fplugin GHC.TypeLits.Normalise
  -fplugin GHC.TypeLits.Extra.Solver

source-dirs:
  - src

flags:
  sim:
    manual: True
    default: True
  verilator:
    manual: True
    default: False

executables:
  chip8:
    main: simulator.hs
    dependencies:
      - retroclash-sim
      - optparse-applicative
      - template-haskell
      - bytestring
      - array
    when:
    - condition: "!flag(sim)"
      buildable: false

  chip8-board:
    main: simulator-board.hs
    dependencies:
      - retroclash-sim
      - optparse-applicative
      - template-haskell
      - bytestring
      - array
      - temporary
      - extra
    when:
    - condition: "!flag(sim)"
      buildable: false

  chip8-vga:
    main: simulator-vga.hs
    other-modules:
      - CHIP8.Input
      - CHIP8.Types
    dependencies:
      - retroclash-sim
      - extra
    verbatim:
      x-clashilator-top-is: CHIP8.VideoTestBench
      x-clashilator-clock: CLK_25MHZ
      x-clashilator-clash-flags: -fclash-inline-limit=400
    when:
    - condition: "!(flag(sim) && flag(verilator))"
      buildable: false
